// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gitaepark/pha/service (interfaces: Service)

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	dto "github.com/gitaepark/pha/dto"
	service "github.com/gitaepark/pha/service"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockService) CreateProduct(arg0 context.Context, arg1 service.CreateProductParams) service.CustomErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(service.CustomErr)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockServiceMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockService)(nil).CreateProduct), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockService) DeleteProduct(arg0 context.Context, arg1 service.DeleteProductParams) service.CustomErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(service.CustomErr)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockServiceMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockService)(nil).DeleteProduct), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockService) GetProduct(arg0 context.Context, arg1 service.GetProductParams) (dto.GetProductResponse, service.CustomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(dto.GetProductResponse)
	ret1, _ := ret[1].(service.CustomErr)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockServiceMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockService)(nil).GetProduct), arg0, arg1)
}

// GetProductList mocks base method.
func (m *MockService) GetProductList(arg0 context.Context, arg1 service.GetProductListParams) (dto.GetProductListResponse, service.CustomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductList", arg0, arg1)
	ret0, _ := ret[0].(dto.GetProductListResponse)
	ret1, _ := ret[1].(service.CustomErr)
	return ret0, ret1
}

// GetProductList indicates an expected call of GetProductList.
func (mr *MockServiceMockRecorder) GetProductList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductList", reflect.TypeOf((*MockService)(nil).GetProductList), arg0, arg1)
}

// Login mocks base method.
func (m *MockService) Login(arg0 context.Context, arg1 service.LoginParams) (dto.LoginResponseBody, service.CustomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(dto.LoginResponseBody)
	ret1, _ := ret[1].(service.CustomErr)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockService) Register(arg0 context.Context, arg1 dto.RegisterRequestBody) service.CustomErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(service.CustomErr)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockServiceMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockService)(nil).Register), arg0, arg1)
}

// RenewAccessToken mocks base method.
func (m *MockService) RenewAccessToken(arg0 context.Context, arg1 service.RenewAccessTokenParams) (dto.LoginResponseBody, service.CustomErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewAccessToken", arg0, arg1)
	ret0, _ := ret[0].(dto.LoginResponseBody)
	ret1, _ := ret[1].(service.CustomErr)
	return ret0, ret1
}

// RenewAccessToken indicates an expected call of RenewAccessToken.
func (mr *MockServiceMockRecorder) RenewAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewAccessToken", reflect.TypeOf((*MockService)(nil).RenewAccessToken), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockService) UpdateProduct(arg0 context.Context, arg1 service.UpdateProductParams) service.CustomErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(service.CustomErr)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockServiceMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockService)(nil).UpdateProduct), arg0, arg1)
}
