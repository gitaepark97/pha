// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package repository

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO user(
  phone_number,
  hashed_password
) VALUES (
  ?, ?
)
`

type CreateUserParams struct {
	PhoneNumber    string `json:"phone_number"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.PhoneNumber, arg.HashedPassword)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
  id, phone_number, hashed_password, created_at
FROM user
WHERE phone_number = ?
`

func (q *Queries) GetUser(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}
